[tox]
isolated_build = true
envlist =
    py310-django40
    py{310,311,312}-django42
    py{310,311,312}-django50
    py{310,311,312}-django51
    quality
    security
    coverage
    build

# Configuración para tox-gh-actions (usado en GitHub Actions)
[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312

[gh-actions:env]
DJANGO =
    4.0: django40
    4.2: django42
    5.0: django50
    5.1: django51

# Configuración base para todos los entornos de test
[testenv]
allowlist_externals = poetry
skip_install = true
deps =
    coverage[toml]
    pytest
    pytest-django
    pytest-cov
setenv =
    PYTHONPATH = {toxinidir}
    DJANGO_SETTINGS_MODULE = tests.settings
commands_pre =
    poetry install --no-root
commands =
    poetry run pytest tests/ --cov=graphene_django_extras --cov-report=xml --cov-report=html --cov-report=term-missing {posargs}

# Entornos específicos para Django (optimizados)
[testenv:py310-django40]
deps =
    {[testenv]deps}
    django~=4.0.0
commands_pre =
    poetry install --no-root
    poetry run pip install 'django~=4.0.0'
commands =
    {[testenv]commands}

[testenv:py{310,311,312}-django42]
deps =
    {[testenv]deps}
    django~=4.2.0
commands_pre =
    poetry install --no-root
    poetry run pip install 'django~=4.2.0'
commands =
    {[testenv]commands}

[testenv:py{310,311,312}-django50]
deps =
    {[testenv]deps}
    django~=5.0.0
commands_pre =
    poetry install --no-root
    poetry run pip install 'django~=5.0.0'
commands =
    {[testenv]commands}

[testenv:py{310,311,312}-django51]
deps =
    {[testenv]deps}
    django~=5.1.0
commands_pre =
    poetry install --no-root
    poetry run pip install 'django~=5.1.0'
commands =
    {[testenv]commands}

# Entorno para quality checks
[testenv:quality]
allowlist_externals = poetry
skip_install = true
deps =
    black
    flake8
    flake8-docstrings
    flake8-import-order
    flake8-bugbear
    isort
    mypy
    types-requests
commands_pre =
    poetry install --no-root
commands =
    poetry run black --check --diff .
    poetry run isort --check-only --diff .
    poetry run flake8 .
    poetry run mypy graphene_django_extras/ --ignore-missing-imports

# Entorno para security checks
[testenv:security]
allowlist_externals = poetry
skip_install = true
deps =
    bandit[toml]
    safety
    pip-audit
commands_pre =
    poetry install --no-root
commands =
    poetry run bandit -r graphene_django_extras/ -f json -o bandit-report.json
    poetry run bandit -r graphene_django_extras/ 
    poetry run safety check --json --output safety-report.json
    poetry run safety check
    poetry run pip-audit --format=json --output=pip-audit-report.json
    poetry run pip-audit

# Entorno específico para coverage
[testenv:coverage]
allowlist_externals = poetry
skip_install = true
deps =
    {[testenv]deps}
    django~=5.1.0  # Usar la versión más reciente para coverage
commands_pre =
    poetry install --no-root
    poetry run pip install 'django~=5.1.0'
commands =
    poetry run pytest tests/ --cov=graphene_django_extras --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=80 {posargs}
    poetry run coverage xml
    poetry run coverage html
    poetry run coverage report

# Entorno para build
[testenv:build]
allowlist_externals = poetry
skip_install = true
deps =
    build
    twine
commands_pre =
    poetry install --no-root
commands =
    poetry build
    poetry run twine check dist/*

# Entorno para desarrollo local
[testenv:dev]
allowlist_externals = poetry
skip_install = true
deps =
    {[testenv]deps}
    {[testenv:quality]deps}
    {[testenv:security]deps}
    django~=5.1.0
    ipython
    django-extensions
commands_pre =
    poetry install --no-root
    poetry run pip install 'django~=5.1.0'
commands =
    poetry run python -c "print('Development environment ready! Use: poetry run python manage.py shell_plus')"

# Configuración para pytest
[pytest]
DJANGO_SETTINGS_MODULE = tests.settings
python_files = tests.py test_*.py *_tests.py
testpaths = tests
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov-branch
    --no-cov-on-fail

# Configuración para coverage
[coverage:run]
source = graphene_django_extras
branch = true
omit = 
    */migrations/*
    */tests/*
    */venv/*
    */.tox/*
    */setup.py
    */manage.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\(Protocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

# Configuración para flake8
[flake8]
max-line-length = 88
select = E,W,F,C,N
ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator
    F401,  # imported but unused (handled by isort)
exclude = 
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv,
    migrations

# Configuración para isort
[isort]
profile = black
multi_line_output = 3
line_length = 88
known_first_party = graphene_django_extras
known_django = django
sections = FUTURE,STDLIB,DJANGO,THIRDPARTY,FIRSTPARTY,LOCALFOLDER

# Configuración para black
[black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# Configuración para bandit
[bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101"]  # Skip assert_used test