[tool.poetry]
name = "graphene-django-extras"
version = "1.0.1"
description = "This library adds extra functionalities to graphene-django to facilitate GraphQL use without Relay, allow paginations and filtering integration, and add extra directives."
readme = "README.rst"
authors = [
    "Ernesto Perez Amigo <eamigop86@gmail.com>",
    "Martin Andersen <dk.mi.andersen@gmail.com>",
    "Lukasz Dynowski <ludyn@leo-pharma.com>",
]
license = "MIT"
homepage = "https://github.com/eamigo86/graphene-django-extras"
repository = "https://github.com/eamigo86/graphene-django-extras"
documentation = "https://github.com/eamigo86/graphene-django-extras"
classifiers = [
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries",
    "Framework :: Django",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: PyPy",
]
keywords = ["api", "graphql", "protocol", "graphene", "django"]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
django = ">=3.2,<6.0"
django-filter = ">=22.1"
djangorestframework = "^3"
python-dateutil = ">=2.8.2,<3.0"
graphene-django = "^3.2"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-django = "^4.5.0"
pytest-cov = "^4.1.0"
factory_boy = "^3.3.0"

# Code Quality
black = "^24.3.0"          # Support Python 3.12
isort = "^5.12.0"
flake8 = "^6.0.0"
flake8-docstrings = "^1.7.0"
flake8-bugbear = "^23.0.0"
mypy = "^1.5.0"
pyflakes = "^3.0.0"
types-six = "^1.16.0"
types-python-dateutil = "^2.8.0"

# Security
bandit = "^1.7.5"
pip-audit = "^2.6.0"

# Development Tools
tox = "^4.11.0"
tox-gh-actions = "^3.1.0"
ipdb = "^0.13.13"

# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.4.0"
pymdown-extensions = "^10.4.0"

# Coverage
coverage = {extras = ["toml"], version = "^7.3.0"}


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["graphene_django_extras"]
known_django = ["django"]
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.coverage.run]
source = ["graphene_django_extras"]
branch = true
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/.tox/*",
    "*/setup.py",
    "*/manage.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\(Protocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = [
    "B101",  # Skip assert_used test - asserts are OK in library code for validation
    "B311",  # Skip random - not used for security purposes
    "B324",  # Skip MD5 - used for cache keys, not cryptographic security
]

[tool.pytest.ini_options]
python_files = ["tests.py", "test_*.py", "*_tests.py"]
testpaths = ["tests"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov-branch",
    "--no-cov-on-fail",
    "--cov=graphene_django_extras",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
warn_unused_ignores = false
warn_redundant_casts = false
warn_unused_configs = false
show_error_codes = false
strict_optional = false
disable_error_code = ["union-attr", "attr-defined", "assignment", "var-annotated", "misc", "valid-type"]

[tool.flake8]
max-line-length = 88
select = ["E", "W", "F", "C", "N", "D"]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    ".tox",
    ".eggs",
    "*.egg",
    "build",
    "dist",
    ".venv",
    "venv",
    "migrations"
]
per-file-ignores = [
    "__init__.py:F401",  # Allow unused imports in __init__.py
    "tests/*:D",         # Don't require docstrings in tests
]
