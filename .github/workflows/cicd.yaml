name: Continuous Integration & Delivery
on:
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    branches: [ master, actions ]
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - python: '3.10'
          django: 3.2
          toxenv: py310-django32
        - python: '3.10'
          django: 4.0
          toxenv: py310-django40
        - python: '3.10'
          django: 4.2
          toxenv: py310-django42
        - python: '3.10'
          django: 5.0
          toxenv: py310-django50
        - python: '3.10'
          django: 5.1
          toxenv: py310-django51
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      name: Set up Python ${{ matrix.python }} ${{ matrix.django }}
      with:
        python-version: ${{ matrix.python }}
    - name: Install pip packages
      run: |
        pip install pip --upgrade
        pip install codecov poetry tox
    - name: "Run tox - testenv: ${{ matrix.toxenv }}"
      env:
        DJANGO: ${{ matrix.django }}
        TOXENV: ${{ matrix.toxenv }}
      run: tox
    - name: Run notification script
      env:
        GITHUB_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        GITHUB_JOB_STATUS: ${{ job.status }}
        GITHUB_RUN_URL: ${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      run: ./scripts/notification.sh

  quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - python: '3.10'
          toxenv: quality
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      name: Set up Python ${{ matrix.python }}
      with:
        python-version: ${{ matrix.python }}
    - name: Install pip packages
      run: |
        pip install pip --upgrade
        pip install poetry tox
    - name: "Run tox - testenv: ${{ matrix.toxenv }}"
      env:
        TOXENV: ${{ matrix.toxenv }}
      run: tox

  security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - python: '3.10'
          toxenv: security
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      name: Set up Python ${{ matrix.python }}
      with:
        python-version: ${{ matrix.python }}
    - name: Install pip packages
      run: |
        pip install pip --upgrade
        pip install poetry tox
    - name: "Run tox - testenv: ${{ matrix.toxenv }}"
      env:
        TOXENV: ${{ matrix.toxenv }}
      run: tox

  publish:
    needs: [ test, security, quality ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install pip packages
      run: |
        pip install --upgrade pip
        pip install poetry tox
    - name: Bump package version
      run: ./scripts/bump.py --dry-run no
    - name: Build package
      run: tox -e build

    # ðŸ“¦ Publish
    - name: Publish package
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_ACCESS_TOKEN }}
      run: |
        if [[ "${GITHUB_REF}" == "refs/heads/master" ]]; then
          echo "Publishing to PyPI (Production)..."
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --build -r pypi
        else
          echo "Publishing to TestPyPI..."
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi $PYPI_TOKEN
          poetry publish --build -r testpypi
        fi

    - name: Create bump commit
      uses: EndBug/add-and-commit@latest
      with:
        author_name: github_actions
        author_email: github_actions
        message: PR Auto bumping package version
        add: pyproject.toml
